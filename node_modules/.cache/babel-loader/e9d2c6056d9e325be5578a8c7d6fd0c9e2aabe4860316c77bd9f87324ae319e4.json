{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\Furniture-Rental-main\\\\src\\\\components\\\\Cart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cart = ({\n  cartItems,\n  totalAmount\n}) => {\n  _s();\n  const [openPaymentModal, setOpenPaymentModal] = useState(false);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(null);\n  const handlePaymentMethodChange = method => {\n    setSelectedPaymentMethod(method);\n  };\n  const handleConfirmPayment = () => {\n    if (selectedPaymentMethod === 'Card') {\n      processCardPayment();\n    } else if (selectedPaymentMethod === 'UPI') {\n      processUPIPayment();\n    }\n  };\n  const processCardPayment = () => {\n    // Here, we'll call the Razorpay API to handle card payments\n    const options = {\n      key: \"your_razorpay_key\",\n      // Your Razorpay key\n      amount: totalAmount * 100,\n      // Amount in paise\n      currency: \"INR\",\n      name: \"Your Business\",\n      description: \"Payment for Cart Items\",\n      image: \"https://example.com/your-logo.png\",\n      handler: function (response) {\n        alert(\"Payment Successful: \" + response.razorpay_payment_id);\n        setOpenPaymentModal(false);\n      },\n      prefill: {\n        name: \"Customer Name\",\n        email: \"customer@example.com\",\n        contact: \"9999999999\"\n      },\n      notes: {\n        address: \"Address\"\n      },\n      theme: {\n        color: \"#F37254\"\n      }\n    };\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  };\n  const processUPIPayment = () => {\n    // Call Razorpay UPI payment, it will redirect the user to Google Pay or PhonePe\n    const options = {\n      key: \"your_razorpay_key\",\n      // Your Razorpay key\n      amount: totalAmount * 100,\n      // Amount in paise\n      currency: \"INR\",\n      name: \"Your Business\",\n      description: \"Payment for Cart Items\",\n      handler: function (response) {\n        alert(\"Payment Successful via UPI: \" + response.razorpay_payment_id);\n        setOpenPaymentModal(false);\n      },\n      prefill: {\n        name: \"Customer Name\",\n        email: \"customer@example.com\",\n        contact: \"9999999999\"\n      },\n      notes: {\n        address: \"Address\"\n      },\n      theme: {\n        color: \"#F37254\"\n      },\n      method: \"upi\"\n    };\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: [\"Total Amount: Rs.\", totalAmount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => setOpenPaymentModal(true),\n      children: \"Proceed to Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openPaymentModal,\n      onClose: () => setOpenPaymentModal(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Select Payment Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          sx: {\n            marginBottom: 2\n          },\n          onClick: () => handlePaymentMethodChange('Card'),\n          children: \"Pay with Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          fullWidth: true,\n          onClick: () => handlePaymentMethodChange('UPI'),\n          children: \"Pay with UPI (Google Pay, PhonePe)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirmPayment,\n          color: \"primary\",\n          children: \"Confirm Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenPaymentModal(false),\n          color: \"secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"x1p1LqWk8WtX7z86AUlfjuXvpv0=\");\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","Button","Dialog","DialogActions","DialogContent","DialogTitle","Typography","jsxDEV","_jsxDEV","Cart","cartItems","totalAmount","_s","openPaymentModal","setOpenPaymentModal","selectedPaymentMethod","setSelectedPaymentMethod","handlePaymentMethodChange","method","handleConfirmPayment","processCardPayment","processUPIPayment","options","key","amount","currency","name","description","image","handler","response","alert","razorpay_payment_id","prefill","email","contact","notes","address","theme","color","rzp","window","Razorpay","open","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClose","fullWidth","sx","marginBottom","_c","$RefreshReg$"],"sources":["C:/Users/acer/Desktop/Furniture-Rental-main/src/components/Cart.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography } from '@mui/material';\r\n\r\nconst Cart = ({ cartItems, totalAmount }) => {\r\n  const [openPaymentModal, setOpenPaymentModal] = useState(false);\r\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(null);\r\n\r\n  const handlePaymentMethodChange = (method) => {\r\n    setSelectedPaymentMethod(method);\r\n  };\r\n\r\n  const handleConfirmPayment = () => {\r\n    if (selectedPaymentMethod === 'Card') {\r\n      processCardPayment();\r\n    } else if (selectedPaymentMethod === 'UPI') {\r\n      processUPIPayment();\r\n    }\r\n  };\r\n\r\n  const processCardPayment = () => {\r\n    // Here, we'll call the Razorpay API to handle card payments\r\n    const options = {\r\n      key: \"your_razorpay_key\", // Your Razorpay key\r\n      amount: totalAmount * 100, // Amount in paise\r\n      currency: \"INR\",\r\n      name: \"Your Business\",\r\n      description: \"Payment for Cart Items\",\r\n      image: \"https://example.com/your-logo.png\",\r\n      handler: function (response) {\r\n        alert(\"Payment Successful: \" + response.razorpay_payment_id);\r\n        setOpenPaymentModal(false);\r\n      },\r\n      prefill: {\r\n        name: \"Customer Name\",\r\n        email: \"customer@example.com\",\r\n        contact: \"9999999999\"\r\n      },\r\n      notes: {\r\n        address: \"Address\"\r\n      },\r\n      theme: {\r\n        color: \"#F37254\"\r\n      }\r\n    };\r\n\r\n    const rzp = new window.Razorpay(options);\r\n    rzp.open();\r\n  };\r\n\r\n  const processUPIPayment = () => {\r\n    // Call Razorpay UPI payment, it will redirect the user to Google Pay or PhonePe\r\n    const options = {\r\n      key: \"your_razorpay_key\", // Your Razorpay key\r\n      amount: totalAmount * 100, // Amount in paise\r\n      currency: \"INR\",\r\n      name: \"Your Business\",\r\n      description: \"Payment for Cart Items\",\r\n      handler: function (response) {\r\n        alert(\"Payment Successful via UPI: \" + response.razorpay_payment_id);\r\n        setOpenPaymentModal(false);\r\n      },\r\n      prefill: {\r\n        name: \"Customer Name\",\r\n        email: \"customer@example.com\",\r\n        contact: \"9999999999\"\r\n      },\r\n      notes: {\r\n        address: \"Address\"\r\n      },\r\n      theme: {\r\n        color: \"#F37254\"\r\n      },\r\n      method: \"upi\"\r\n    };\r\n\r\n    const rzp = new window.Razorpay(options);\r\n    rzp.open();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h5\">Total Amount: Rs.{totalAmount}</Typography>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => setOpenPaymentModal(true)}\r\n      >\r\n        Proceed to Payment\r\n      </Button>\r\n\r\n      {/* Payment Modal */}\r\n      <Dialog open={openPaymentModal} onClose={() => setOpenPaymentModal(false)}>\r\n        <DialogTitle>Select Payment Method</DialogTitle>\r\n        <DialogContent>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            fullWidth\r\n            sx={{ marginBottom: 2 }}\r\n            onClick={() => handlePaymentMethodChange('Card')}\r\n          >\r\n            Pay with Card\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            fullWidth\r\n            onClick={() => handlePaymentMethodChange('UPI')}\r\n          >\r\n            Pay with UPI (Google Pay, PhonePe)\r\n          </Button>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleConfirmPayment} color=\"primary\">\r\n            Confirm Payment\r\n          </Button>\r\n          <Button onClick={() => setOpenPaymentModal(false)} color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}